<apex:page controller="SL_LIB16_MassEdit_CompanyListMember" title="Manage Targets Edit" action="{!loadDefaultsTarget}">
<script>
if (!window.console) {var console = {};}
if (!console.log) {console.log = function() {};}
</script>

    <apex:outputPanel id="opMsg"><apex:pageMessages /></apex:outputPanel>
    <apex:outputPanel id="mainPContainer" rendered="{!hasNoError}">
    <apex:includeScript value="{!$Resource.SL_LIB16_getElementByClassName}"/>
    <apex:includeScript value="{!URLFOR($Resource.SL_LIB16_jQuerySFFiltres, 'js/jquery-1.4.2.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.SL_LIB16_jQuerySFFiltres, 'js/jquery-ui-1.8.4.custom.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.SL_LIB16_jQuerySFFiltres, 'js/ui.timepicker.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.SL_LIB16_blockUI)}"/>

<script>
    $(document).ready(function(){
        $('.filter').change(function(){
            filter();
        });
        initBtn(); 
    });

    function goToTop(){ scroll(0,300);}

        function onlyNumbers(evt, val, pnumb)
        {
            var e = (typeof(event)!="undefined")?(event):(evt); // for trans-browser compatibility
            var charCode = e.which || e.keyCode;
            
            if (charCode==13){
                if( (val-1) != pnumb){ loadPage(val-1);}
                return false;
            }

            if (charCode > 31 && (charCode < 48 || charCode > 57)){ return false;}
            if (e.shiftkey){ return false;}

            return true;
        } 

        function clearTable(table)
        {
            var row;
            var i = table.rows.length;
            while (i--)
            {
                row = table.rows[i];
                var j = row.cells.length;
                while (j--)
                {
                    if (row.cells[j].style.display == 'none'){row.removeChild(row.cells[j]);}

                }
            }
        }
        
        function singleAdd(){
            var inImpl = '{!$CurrentPage.parameters.implId}';
            var inExpID = '{!$CurrentPage.parameters.extId}';
            
            var url = '';
            if(inImpl!='' && inImpl!='null'){ url = '/apex/SL_LIB16_Custom_Lookup_Page?&lksrch=&clid={!$CurrentPage.parameters.clid}&implId='+inImpl+'&mt=1';}
            if(inExpID!='' && inExpID!='null'){ url = '/apex/SL_LIB16_Custom_Lookup_Page?&lksrch=&clid={!$CurrentPage.parameters.clid}&extId='+inExpID+'&mt=1';}
            
            var width = 670;
            openPopup(url, "lookup", 350, 480, "width="+width+",height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
        }
        
    /*
     * Function performs mass change for checked items.
     * @obj: event object
     * @cl: class of the objects to change
     * @odd: For some objects there are twice as much objects in html than it is appear to user.
     *       Set it to 'true' so them, e.g. lookup fields.
     */
    function massChange(obj, cl, odd)
    {
        if(isBtnDisable)
        {
            isBtnDisable = false;
            $('.btnSaveAdnBack').each(function (index, elem ){
                $(elem).attr("disabled", false);
                $(elem).attr("class", "btn btnSaveAdnBack");
            });
            
        }
    
        odd = odd ? odd : false;
        cl = '.' + cl;
        if($(obj).parent().hasClass("lookupInput")){ odd = true;}
        var ind = $(cl).index(obj);
        var indOdd = odd ? ind/2 : ind;

        if($('.targetCheck').eq(indOdd).attr('checked')){
            var value = $(obj).val();
            $('.targetCheck').each(function (index, elem){
                try
                {
                    if($(elem).attr('checked')){
                        var i = odd ? index * 2 : index;
                        if(obj.type == 'checkbox')
                        {
                            $(cl).eq(i).attr("checked", obj.checked);
                        }
                        else
                        {
                            $(cl).eq(i).val(value);
                        }
                    }
                } catch(err) {}
            });
        }
    }

var isBtnDisable = true;
function initBtn()
{
    $('.btnSaveAdnBack').each(function (index, elem ){
        $(elem).attr("disabled", true);
        //btnDisabled
        $(elem).attr("class", "btnDisabled btnSaveAdnBack");
    });
    isBtnDisable = true;
}

</script>

<style>
span.asteric {
    font-weight: bold;
    font-size: 17px;
    display: inline;
    color: red;
} 
span.saveNoteSpan {
    font-weight: bold;
    display: none;
    color: red;
} 
</style>

<apex:sectionHeader title="Edit Records" subtitle="{!ParentName}"/>
<apex:form id="f0">
    <apex:actionFunction name="filter" action="{!refetchMembers}" rerender="targets" status=""/>
    <apex:pageBlock rendered="{!isManageTargets}"> 
        <apex:pageBlockButtons >
            <apex:commandButton onclick="singleAdd();" value="Single Add"/>
            <apex:commandButton action="{!addMultipleItems}" value="Multi Add"/>
            <!--
            <apex:commandButton action="{!filter}" value="Mass Edit" onclick="switchEditMode(); return false;" rendered="{!IF(editMode, 'false','true')}"/>
            <apex:commandButton action="{!gotoEntity}" value="Back to {!Fund.Name}" rendered="{!IF(editMode, 'false','true')}"/>
            <apex:commandButton action="{!save}" value="Save" rendered="{!IF(editMode, 'true','false')}" />
            <apex:commandButton action="{!saveClose}" value="Save and Close" rendered="{!IF(editMode, 'true','false')}" styleClass="deleteBtn"/>
            <apex:commandButton action="{!filter}" value="Delete" onclick="deleteTargets(); return false;" rendered="{!IF(editMode, 'true','false')}" />
            <apex:commandButton action="{!cancel}" value="Cancel" rendered="{!IF(editMode, 'true','false')}" />
            -->
            <apex:commandButton value="Save" action="{!doCusSave}" rerender="pb0,opMsg" rendered="{!NOT(IsViewState)}" status="MCSub"/>
            <apex:commandButton value="Delete" action="{!doDelete}" rerender="pb0,opMsg" status="MCSub"/>
            <apex:commandButton styleClass="btnSaveAdnBack" value="Save & Back" action="{!saveClose}" rendered="{!NOT(IsViewState)}" status="MCSub"/>
            <apex:commandButton value="Cancel & Back" action="{!close}" immediate="true" rerender="pb0,opMsg" rendered="{!NOT(IsViewState)}" status="MCSub"/>
            <apex:commandButton value="Edit" action="{!startEdit}" rerender="pb0,opMsg" immediate="true" rendered="{!IsViewState}" status="MCSub"/>
            <!--<apex:commandButton value="Delete" action="{!doDelete}" rerender="pb0,opMsg" rendered="{!IsViewState}" status="MCSub"/>-->
            <apex:commandButton value="Cancel" action="{!close}" immediate="true" rendered="{!IsViewState}" status="MCSub"/>

        </apex:pageBlockButtons>
        <apex:pageBlock >
            <apex:pageBlockSection title="Quick Filters for Targets" columns="1">
                <apex:outputText >Note: Only editable fields with 'equal' and 'includes' relations are available to be filtered on. When multiple filter fields available the 'AND' relationship applied for all them.</apex:outputText>
                <apex:outputText rendered="{!filters==null || filters.empty}">No filters added</apex:outputText>
                <apex:outputPanel rendered="{!NOT(filters==null || filters.empty)}">
                    <apex:repeat value="{!filters}" var="item">
                        <apex:outputLabel value="{!filterLabels[item.Field__c]}">: &nbsp;</apex:outputLabel>
                        <apex:inputField value="{!filterObj[item.Field__c]}" styleClass="filter" required="false"/>
                    </apex:repeat>
                </apex:outputPanel>
            </apex:pageBlockSection>
        </apex:pageBlock>
        <apex:outputPanel id="targets" title="Targets" styleClass="mrgTop">
            <apex:pageBlock rendered="{!!isItems}">
                <apex:outputText >No items found</apex:outputText>
            </apex:pageBlock>
            <apex:pageBlock id="pb0" rendered="{!NOT(inEditColumns) && isItems}">
                <apex:actionFunction action="{!voidAction}" name="loadPage" rerender="pb0,opMsg" status="MCSub">
                    <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageNumber}"/>
                </apex:actionFunction>
                <!--
                <apex:pageBlockButtons location="both" style="align: right;">
                    <table><tr><td>
                        <apex:commandButton value="Save" action="{!doCusSave}" rerender="pb0,opMsg" rendered="{!NOT(IsViewState)}" status="MCSub"/>
                        <apex:commandButton value="Delete" action="{!doDelete}" rerender="pb0,opMsg" status="MCSub"/>
                        <apex:commandButton value="Save & Back" action="{!saveClose}" rendered="{!NOT(IsViewState)}" status="MCSub"/>
                        <apex:commandButton value="Cancel & Back" action="{!close}" immediate="true" rerender="pb0,opMsg" rendered="{!NOT(IsViewState)}" status="MCSub"/>
                        <apex:commandButton value="Edit" action="{!startEdit}" rerender="pb0,opMsg" immediate="true" rendered="{!IsViewState}" status="MCSub"/>
                        <!--<apex:commandButton value="Delete" action="{!doDelete}" rerender="pb0,opMsg" rendered="{!IsViewState}" status="MCSub"/>-!->
                        <apex:commandButton value="Cancel" action="{!close}" immediate="true" rendered="{!IsViewState}" status="MCSub"/>
                        </td></tr>
                        <tr><td><span class="saveNoteSpan">Click Save to apply changes</span></td></tr></table>
                </apex:pageBlockButtons>
                -->
                
                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="First" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==0, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="0"/>
                    </apex:commandLink>
                    <apex:outputLabel value="First" rendered="{!IF(pageNumber==0, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Prev" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==0, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageNumber-1}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Prev" rendered="{!IF(pageNumber==0, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span> 

                <span style="display: inline; width: 25px;">
                    <input type="text" value="{!pageNumber+1}" styleClass="pageInput" size="2" onkeypress="return onlyNumbers(event, this.value, '{!pageNumber}');" onblur="if ((this.value-1)!=({!pageNumber})) { loadPage(this.value-1);}"/>
                    <apex:outputLabel value=" / {!pageCount+1}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span> 

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Next" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==pageCount, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageNumber+1}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Next" rendered="{!IF(pageNumber==pageCount, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Last" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==pageCount, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageCount}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Last" rendered="{!IF(pageNumber==pageCount, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>
                <span style="display: inline; width: 125px;"> Qty: &nbsp; 
                    <apex:selectList value="{!pageSize}" multiselect="false" size="1" onchange="savePageSize(this.value);">
                        <apex:selectOptions value="{!pageSizeValues}"/>
                    </apex:selectList>
                </span>
                
                <table id="dtable" class="list" border="0" cellpadding="0" cellspacing="0" style="visibility: hidden;">
                    <thead class="rich-table-thead">
                        <tr class="headerRow">
                            <th class="headerRow" colspan="1" style="width:32px"><input type="checkbox" id="SelectAllCheckbox" onclick="jQuery('.targetCheck').attr('checked', this.checked);"/></th>
                            <th class="headerRow" colspan="1" style="width:48px">Action</th>
                    <apex:repeat value="{!columnsShown}" var="col">
                        <th class="headerRow" colspan="1">
                        <apex:outputPanel rendered="{!NOT(col.IsEmpty) && col.isSortable}" style="white-space: nowrap;">
                            <apex:commandLink value="{!col.Label}" action="{!changeSorting}" rerender="pb0,opMsg" status="MCSub">
                                <apex:param name="sortExpression" assignTo="{!sortExpression}" value="{!col.sortExpression}"/>
                                <apex:param name="sortDirection" assignTo="{!sortDirection}" value="{!IF(sortExpression==col.sortExpression, sortDirection, 'DESC')}"/>
                            </apex:commandLink>
                            <apex:outputPanel rendered="{!IF(sortExpression==col.sortExpression,IF(sortDirection='ASC','true','false'),'false')}">&uarr;</apex:outputPanel>
                            <apex:outputPanel rendered="{!IF(sortExpression==col.sortExpression,IF(sortDirection='ASC','false','true'),'false')}">&darr;</apex:outputPanel>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!NOT(col.IsEmpty) && NOT(col.isSortable)}" style="white-space: nowrap;">{!col.Label}</apex:outputPanel>
                        </th>
                    </apex:repeat>
                    </tr>
                    </thead>
                    <tbody>
                    <apex:repeat value="{!ConvertedCallLogs}" var="item">
                        <tr class="dataRow {!IF (MOD(item.member.index, 2)==0, 'even', 'odd')} {!IF (item.member.index==0, 'first', '')}" onmouseover="if (window.hiOn){hiOn(this);}" onmouseout="if (window.hiOff){hiOff(this);}" onblur="if (window.hiOff){hiOff(this);}" onfocus="if (window.hiOn){hiOn(this);}">
                            <td class="dataCell" colspan="1" style="width:32px">
                        <apex:inputCheckbox value="{!item.member.isSelected}" styleClass="targetCheck" onclick="if (!this.checked) jQuery('#SelectAllCheckbox').attr('checked', false);"/>
                        <input type="hidden" class="selectionId" value="{!item.CastedSObject.Id}"/>
                        </td>
                        <td class="dataCell" colspan="1" style="width:48px"><apex:outputLink value="/{!item.CastedSObject.Id}/e?retURL={!CurrentUrlEncoded}" target="_top">Edit</apex:outputLink></td>
                        <apex:repeat value="{!columnsShown}" var="col">
                            <td class="dataCell" name="{!col.name}">
                            <apex:outputPanel rendered="{!NOT(col.IsEmpty)}" style="white-space: nowrap;">
                                <!-- <apex:inputField value="{!item.CastedSObject[col.name]}" rendered="{! NOT(IsViewState) && NOT(CONTAINS(col.name,'.'))}" 
                                        onchange="changeSelected(this, '{!col.name}'); setModified(this,'{!item.member.index}', '{!col.name}');"/> -->
                                <apex:inputField value="{!item.CastedSObject[col.name]}" rendered="{! NOT(IsViewState) && NOT(CONTAINS(col.name,'.')) && col.isEditable}" onkeyup="massChange(this,'{!col.name}');"  onchange="massChange(this,'{!col.name}');" styleClass="{!col.name}"/>
                                <apex:outputField value="{!item.CastedSObject[col.name]}" rendered="{! ((IsViewState) && NOT(CONTAINS(col.name,'.'))) || NOT(col.isEditable) || ((CONTAINS(col.name,'.')) && NOT(item.CastedSObject[col.name]==null)) }" />
                            </apex:outputPanel>
                            </td>
                        </apex:repeat>
                        </tr>
                    </apex:repeat>
                    </tbody>
                </table>

                <script>
                    jQuery('input, select').focus(function() {this.oldValue = this.value; })
                    jQuery.each(jQuery('input, select'), function(i, el) {el.origValue = el.value;});
                    var table = document.getElementById('dtable'); 
                    clearTable(table);
                    var els = getElementsByClassName('dateFormat');
                    for (var i=0; i < els.length; i++){ els[i].style.display = "none";}
                    table.style.visibility = 'visible';
                </script>
                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="First" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==0, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="0"/>
                    </apex:commandLink>
                    <apex:outputLabel value="First" rendered="{!IF(pageNumber==0, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Prev" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==0, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageNumber-1}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Prev" rendered="{!IF(pageNumber==0, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span> 

                <span style="display: inline; width: 25px;">
                    <input type="text" value="{!pageNumber+1}" styleClass="pageInput" size="2" onkeypress="return onlyNumbers(event, this.value, '{!pageNumber}');" onblur="if ((this.value-1)!=({!pageNumber})) { loadPage(this.value-1);}"/>
                    <apex:outputLabel value=" / {!pageCount+1}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span> 

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Next" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==pageCount, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageNumber+1}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Next" rendered="{!IF(pageNumber==pageCount, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>

                <span style="display: inline; width: 25px;">
                    <apex:commandLink value="Last" action="{!voidAction}" rerender="pb0,opMsg" rendered="{!IF(pageNumber==pageCount, false, true)}" status="MCSub">
                        <apex:param name="pageNumber" assignTo="{!pageNumber}" value="{!pageCount}"/>
                    </apex:commandLink>
                    <apex:outputLabel value="Last" rendered="{!IF(pageNumber==pageCount, true, false)}"/>
                </span>
                <span style="color: #999999;">&nbsp;|&nbsp;&nbsp;</span>
                <span style="display: inline; width: 125px;"> Qty: &nbsp; 
                    <apex:selectList value="{!pageSize}" multiselect="false" size="1" onchange="savePageSize(this.value);">
                        <apex:selectOptions value="{!pageSizeValues}"/>
                    </apex:selectList>
                </span>

                <apex:actionFunction name="savePageSize" action="{!doSavePageSize}" rerender="pb0,opMsg" status="MCSub">
                    <apex:param name="pageSize" assignTo="{!pageSize}" value=""/>
                    <apex:param name="pageNumber" assignTo="{!pageNumber}" value="0"/>
                </apex:actionFunction>
            </apex:pageBlock>

    </apex:outputPanel>
    </apex:pageBlock>
</apex:form>

<script>

String.prototype.trim = function() {return (this.replace(/^[\s\xA0]+/, "").replace(/[\s\xA0]+$/, ""))}
String.prototype.startsWith = function(str) {return (this.match("^"+str)==str)}
String.prototype.endsWith = function(str) {return (this.match(str+"$")==str)}

function noenter() {
    return !(window.event && window.event.keyCode == 13); 
}

var multieditDialog = document.getElementById('multieditDialog');
var overlayDiv = document.createElement('div');
overlayDiv.className = "overlayBackground";
overlayDiv.style.width = "100%"; 
overlayDiv.style.height = "100%"; 
overlayDiv.style.display = "none";
overlayDiv.style.position = "fixed";
//document.body.appendChild(overlayDiv);


function selectCheckbox(el){
    while (el.nodeName!='TR') el = el.parentNode;
    var checks = getElementsByClassName('selectionCheckbox', el);
    for (var i=0; i < checks.length; i++){
        checks[i].checked = true;
    }
}

function isRowChecked(row){
    var checks = getElementsByClassName('selectionCheckbox', row);
    if (checks.length > 0 && checks[0].checked) return true;
    return false;
}

function getRowId(el){
    while (el.nodeName!='TR') el = el.parentNode;
    var checks = getElementsByClassName('selectionId', el);
    for (var i=0; i < checks.length; i++){
        return checks[i].value;
    }
}

function tryDoMultiedit(action, field, id, allow){
    if (allow) doMultiEdit(action, field, id);
}

function doChangeRow(row, colName, value, skipSelectLookup){
    var cells = getElementsByClassName('dataCell', row);
    for (var i=0; i < cells.length; i++){
        if (cells[i].getAttribute('name')==colName){
            setValueRec(cells[i], value, skipSelectLookup);
        }
    }
}

function setValueRec(el, value, skipSelectLookup){
    if (el.nodeName=='SELECT'){
        if (!skipSelectLookup){
            el.value = value;
        }
    } else 
    if (el.nodeName=='INPUT'){
        var name = el.getAttribute('name');
        name = name.substr(name.lastIndexOf(':')+1);
        if (   !name.endsWith('_lkid') 
            && !name.endsWith('_lkold')
            && !name.endsWith('_lktp') 
            && !name.endsWith('_lspf') 
            && !name.endsWith('_lspfsub') 
            && !name.endsWith('_mod')) el.value = value;
    } else {
        var els = el.children;
        //alert(el.getAttribute('name') + ' :: ' + colName + ' :: ' + els.length);
        for (var j=0; j < els.length; j++){
            setValueRec(els[j], value, skipSelectLookup);
        }
    }
}



var element;
var columnName;
function changeSelected(el, colName){
    element = el;
    columnName = colName;
    var value = el.value;
    var table = el;
    while (table.nodeName!='TR') table = table.parentNode;
    if (!isRowChecked(table)) return;
    while (table.nodeName!='TABLE') table = table.parentNode;
    var rows = getElementsByClassName('dataRow', table);
    var countChecked = 0;
    for (var i=0; i < rows.length; i++){
        if (isRowChecked(rows[i])){
            countChecked++;
        }
    }
    if (countChecked>1) {
        $('#yes').click(function() { 
            doChangeOnSelected(element, columnName);
            $.unblockUI(); 
            return true;
        }); 
        $('#no').click(function() { 
            $.unblockUI(); 
            return true; 
        }); 
        $('#cancel').click(function() { 
            doCancelChanges(element, columnName);
            $.unblockUI(); 
            return true; 
        });
        
        $.blockUI({   message: $('#question')
                     ,css: {
                             'width': '350px',
                             'height': '90px',
                             'background-color': '#ffffff',
                             'border': 'none',
                             'padding-left': '25px',
                             'padding-right': '25px',
                             'padding-top': '20px',
                             'padding-bottom': '10px',
                             '-webkit-border-radius': '4px',
                             '-moz-border-radius': '4px',
                             'cursor': 'default'
                                                          
                           }
                  });
         
    }
}

function doCancelChanges(el, colName){
    el.value = el.oldValue;
    var row = el;
    while (row.nodeName!='TR') row = row.parentNode;
    //doUnAstericColumn(el, row, colName);
}

function doChangeOnSelected(el, colName){
    var value = el.value;
    var table = el;
    while (table.nodeName!='TR') table = table.parentNode;
    if (!isRowChecked(table)) return;
    while (table.nodeName!='TABLE') table = table.parentNode;
    var rows = getElementsByClassName('dataRow', table);
    for (var i=0; i < rows.length; i++){
        if (isRowChecked(rows[i])){
            doChangeRow(rows[i], colName, value, false);
            //doAstericColumn(rows[i], colName);
        }
    }
    if (el.nodeName=='SELECT' && el.getAttribute('name').endsWith('_lkid')) {
        value = el.options[el.selectedIndex].innerText;
        var table = el;
        while (table.nodeName!='TABLE') table = table.parentNode;
        var rows = getElementsByClassName('dataRow', table);
        for (var i=0; i < rows.length; i++){
            if (isRowChecked(rows[i])){
                doChangeRow(rows[i], colName, value, true);
            }
        }
    }
}



</script>

<div id="question" style="display:none; cursor: default; " > 
    <br/>
    <h1 style="font-size: 15px;">Apply changes to:</h1> 
    <br/><br/>
    <input type="button" id="yes" value="All selected records" class="btn" style="min-width: 50px;"/> 
    &nbsp;&nbsp;&nbsp;&nbsp;
    <input type="button" id="no" value="The record clicked" class="btn" style="min-width: 50px;"/>
    <!-- &nbsp;&nbsp;&nbsp;&nbsp;
    <input type="button" id="cancel" value="Cancel" class="btn" style="min-width: 50px;"/> -->
</div>

<apex:actionstatus id="MCSub" startText="Processing......">
        <apex:facet name="start">
                <div id="salesforceSource_blurybackground" style="z-index: 100;position:fixed; left:0; top:0; bottom:0; right:0;background-color: #dcdcdc; opacity:0.6;filter:alpha(opacity=60)"></div>
                <div id="ManageMembersViewport_loading" class="waitingSearchDiv" style="width: 100%; height: 80%; display: ''; ">
                    <div style="width: 144px;vertical-align: middle;" class="waitingHolder">
                    <table align="center" valign="top" style="width: 100%; height: 30%">
                    <tr align="center" valign="top" style="width: 100%; height: 30%">
                        <td valign="top"><img class="waitingImage" src="/img/loading.gif"/>
                        <span class="waitingDescription">Processing......</span></td>
                    </tr>
                    </table>
                    </div>
                </div>
                <div id="ManageMembersViewport_loading" class="waitingSearchDiv" style="width: 100%; height: 100%; display: ''; "/>
        </apex:facet>
        <apex:facet name="stop"/>
</apex:actionstatus>
</apex:outputPanel>
</apex:page>